---
- name: Set task variables
  ansible.builtin.set_fact:
    config_dir: ~/.config/nvim
    install_dir: /tmp/nvim-linux64
    tarfile: nvim-linux64.tar.gz

- name: Retrieve latest Neovim release information from GitHub API
  ansible.builtin.uri:
    url: https://api.github.com/repos/neovim/neovim/releases/latest
    method: GET
    return_content: true
  register: api_response

- name: Find and set checksum file URL
  ansible.builtin.set_fact:
    checksum_url: "{{ api_response.json | json_query('assets[?name == `{}.sha256sum`] | [0].browser_download_url'.format(tarfile)) }}"

- name: Retrieve checksum file content
  ansible.builtin.uri:
    url: "{{ checksum_url }}"
    method: GET
    return_content: true
  register: checksum_response

- name: Find and set checksum
  ansible.builtin.set_fact:
    checksum: "{{ checksum_response.content | regex_search('[\\da-f]+') }}"

- name: Find and set tarfile download URL
  ansible.builtin.set_fact:
    download_url: "{{ api_response.json | json_query('assets[?name == `{}`] | [0].browser_download_url'.format(tarfile)) }}"

- name: Download Neovim tarfile
  ansible.builtin.get_url:
    url: "{{ download_url }}"
    dest: "/tmp/{{ tarfile }}"
    checksum: "sha256:{{ checksum }}"
    mode: "0600"

- name: Ensure old install directory is not present
  ansible.builtin.file:
    path: "{{ install_dir }}"
    state: absent

- name: Extract Neovim install directory
  ansible.builtin.unarchive:
    src: "/tmp/{{ tarfile }}"
    dest: /tmp
    creates: "{{ install_dir }}"
    remote_src: true

- name: Remove previous Neovim install
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /usr/bin/nvim
    - /usr/lib/nvim
    - /usr/share/nvim
    - /usr/share/applications/nvim.desktop
    - /usr/share/icons/hicolor/128x128/apps/nvim.png
    - /usr/share/locale/en_GB/LC_MESSAGES/nvim.mo
    - /usr/share/man/man1/nvim.1
  become: true

- name: Install downloaded release
  ansible.builtin.copy:
    src: "{{ install_dir }}/{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
    remote_src: true
  loop:
    - { src: bin/nvim, dest: /usr/bin/nvim, mode: "0755" }
    - { src: lib/nvim/parser, dest: /usr/lib/nvim/, mode: "0755" }
    - {
        src: share/applications/nvim.desktop,
        dest: /usr/share/applications/nvim.desktop,
        mode: "0644",
      }
    - {
        src: share/icons/hicolor/128x128/apps/nvim.png,
        dest: /usr/share/icons/hicolor/128x128/apps/nvim.png,
        mode: "0644",
      }
    - {
        src: share/locale/en_GB/LC_MESSAGES/nvim.mo,
        dest: /usr/share/locale/en_GB/LC_MESSAGES/nvim.mo,
        mode: "0644",
      }
    - {
        src: share/man/man1/nvim.1,
        dest: /usr/share/man/man1/nvim.1,
        mode: "0644",
      }
    - { src: share/nvim/runtime, dest: /usr/share/nvim/, mode: "0755" }
  become: true

- name: Correct checkhealth command error for ruby provider -- step 1
  ansible.builtin.lineinfile:
    path: /usr/share/nvim/runtime/lua/provider/ruby/health.lua
    regexp: "local ruby_detect_table = vim.provider.ruby.detect\\(\\)"
    state: absent
  become: true

- name: Correct checkhealth command error for ruby provider -- step 2
  ansible.builtin.lineinfile:
    path: /usr/share/nvim/runtime/lua/provider/ruby/health.lua
    regexp: "local host(, _)? = (ruby_detect_table\\[1\\]|vim.provider.ruby.detect\\(\\))"
    line: "  local host, _ = vim.provider.ruby.detect()"
    state: present
  become: true

- name: Set Neovim to open in Alacritty when launched -- step 1
  ansible.builtin.lineinfile:
    path: /usr/share/applications/nvim.desktop
    regexp: "Exec=(alacritty -e )?nvim %F"
    line: "Exec=alacritty -e nvim %F"
    state: present
  become: true

- name: Set Neovim to open in Alacritty when launched -- step 2
  ansible.builtin.lineinfile:
    path: /usr/share/applications/nvim.desktop
    regexp: "Terminal=(true|false)"
    line: "Terminal=false"
    state: present
  become: true

- name: Clean up Neovim install files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ install_dir }}"
    - "/tmp/{{ tarfile }}"
  become: true

- name: Set Neovim as default application for "editor", "vi" and "vim" commands
  ansible.builtin.command:
    cmd: "update-alternatives --install /usr/bin/{{ item }} {{ item }} /usr/bin/nvim 120"
  loop:
    - "editor"
    - "vi"
    - "vim"
  become: true
  register: update_output
  changed_when: "'update-alternatives: using /usr/bin/nvim' in update_output.stdout"

- name: Install neovim node package
  ansible.builtin.shell:
    executable: /usr/bin/zsh
    cmd: source ~/.config/nvm/nvm.sh --no-use && npm install -g neovim
    creates: "~/.config/nvm/versions/node/{{ node_version }}/lib/node_modules/neovim"

- name: Check whether Neovim config directory exists
  ansible.builtin.stat:
    path: "{{ config_dir }}"
  register: git_dir

- name: Clone repository to config directory if it doesn't exist
  ansible.builtin.git:
    repo: https://github.com/cfgrok/nvim-config
    dest: "{{ config_dir }}"
    version: master
  when: not git_dir.stat.exists

- name: Update remote url for repo # noqa: command-instead-of-module
  ansible.builtin.command:
    cmd: git remote set-url origin git@github.com:cfgrok/nvim-config.git
    chdir: "{{ config_dir }}"
  changed_when: true
  when: not git_dir.stat.exists
