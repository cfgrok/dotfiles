call plug#begin('~/.vim/plugins')

Plug 'AndrewRadev/splitjoin.vim'
Plug 'Raimondi/delimitMate'
Plug 'altercation/vim-colors-solarized'
Plug 'godlygeek/tabular'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'kana/vim-textobj-user'
Plug 'mattn/emmet-vim'
Plug 'mattn/webapi-vim'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'p0deje/vim-ruby-interpolation'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dadbod'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-test/vim-test'

call plug#end()


" Base options
colorscheme solarized
set background=dark
set clipboard=unnamed,unnamedplus
set history=10000
set nojoinspaces
" set langnoremap
" set nostartofline
set number
set scrolloff=3
set noshowmode
set undodir=$HOME/.vim/undo
set undofile


" Indenting defaults (does not override vim-sleuth's indenting detection)
" Defaults to 4 spaces for most filetypes
if get(g:, '_has_set_default_indent_settings', 0) == 0
    " Set the indenting level to 2 spaces for the following file types.
    autocmd FileType typescript,javascript,css,html,ruby,eruby
        \ setlocal expandtab tabstop=2 shiftwidth=2
    set expandtab
    set tabstop=4
    set shiftwidth=4
    let g:_has_set_default_indent_settings = 1
endif


" delimitMate autoclosing configuration
let delimitMate_quotes = "\" ' ` * |"
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
let delimitMate_jump_expansion = 1

if empty(maparg('<CR>', 'i'))
    imap <CR> <Plug>delimitMateCR
endif


" lightline configuration
let g:lightline = {
    \ 'colorscheme': 'solarized',
    \ 'active': {
    \   'left': [
    \       [ 'mode', 'paste' ],
    \       [ 'gitbranch', 'readonly', 'filepath', 'modified' ]
    \   ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'FugitiveHead',
    \   'filepath': 'LightlinePath',
    \   'fileformat': 'LightlineFileformat',
    \   'fileencoding': 'LightlineFileencoding',
    \   'filetype': 'LightlineFiletype',
    \ },
    \ }

function! LightlinePath()
    return len(expand('%:f')) <= 40 && winwidth(0) > 40 ? expand('%:f') : expand('%:t')
endfunction

function! LightlineFileformat()
    return winwidth(0) > 80 ? &fileformat : ''
endfunction

function! LightlineFileencoding()
    return winwidth(0) > 80 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineFiletype()
    return winwidth(0) > 80 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction


" Emmet JSON parsing support
let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.vim_snippets_custom.json')), "\n"))

" Custom function to toggle dark/light solarized themes
function! ToggleSolarizedBackground()
    let &background = ( &background == 'dark'? 'light' : 'dark' )
    if exists('g:lightline')
        runtime autoload/lightline/colorscheme/solarized.vim
        call lightline#colorscheme()
    endif
endfunction

map <F12> :call ToggleSolarizedBackground()<CR>


" Use Dispatch for running tests
let test#strategy = "dispatch"
