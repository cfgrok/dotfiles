" Set up runtimepath for running vim from XDG config directory
let &runtimepath = substitute(&runtimepath, '\.vim', '.config/vim', 'g')

" Set location of viminfo file to XDG config directory
set viminfo+=n~/.config/vim/viminfo

" Auto-install vim-plug and plugins if not present
if empty(glob('~/.config/vim/autoload/plug.vim'))
  silent execute '!curl -fLo ~/.config/vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.config/vim/plugged')

Plug 'AndrewRadev/splitjoin.vim'
Plug 'Raimondi/delimitMate'
Plug 'godlygeek/tabular'
Plug 'honza/vim-snippets'
Plug 'itchyny/lightline.vim'
Plug 'itchyny/vim-gitbranch'
Plug 'jenterkin/vim-autosource'
Plug 'junegunn/fzf', { 'dir': '~/.config/fzf', 'do': './install --all --xdg --no-update-rc --no-bash' }
Plug 'junegunn/fzf.vim'
Plug 'kana/vim-textobj-user'
Plug 'mattn/emmet-vim'
Plug 'mattn/webapi-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'overcache/NeoSolarized'
Plug 'p0deje/vim-ruby-interpolation'
Plug 'pearofducks/ansible-vim'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dadbod'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-test/vim-test'

" User-defined text objects
Plug 'Julian/vim-textobj-variable-segment' " [ai]v
Plug 'beloglazov/vim-textobj-quotes' " [ai]q -- evaluate, behavior seems sketchy if unmatched quotes are present in file
Plug 'idbrii/textobj-word-column.vim' " [ai]c [ai]C -- remapped from c/C to l/L
Plug 'jceb/vim-textobj-uri' " [ai]u go
Plug 'tek/vim-textobj-ruby' " [ai]r [ai]c [ai]f [ai]n
Plug 'whatyouhide/vim-textobj-erb' " [ai]e -- remapped from E to e
Plug 'whatyouhide/vim-textobj-xmlattr' " [ai]x

" Plug 'nelstrom/vim-textobj-rubyblock' " [ai]r -- superseded by vim-textobj-ruby, investigate possible reversion due to duplication of functionality between coc.nvim and vim-textobj-ruby

" Other user-defined text objects to review
" https://github.com/kana/vim-textobj-indent
" https://github.com/vimtaku/vim-textobj-keyvalue

call plug#end()


" Coc configuration
source ~/.config/vim/coc.vim


" Remap vim-textobj-erb from E to e
silent! ounmap aE
silent! ounmap iE
silent! xunmap aE
silent! xunmap iE

omap ae <Plug>(textobj-erb-a)
omap ie <Plug>(textobj-erb-i)
xmap ae <Plug>(textobj-erb-a)
xmap ie <Plug>(textobj-erb-i)


" Remap idbrii/textobj-word-column.vim from [cC] to [lL]
silent! ounmap ac
silent! ounmap aC
silent! ounmap ic
silent! ounmap iC
silent! xunmap ac
silent! xunmap aC
silent! xunmap ic
silent! xunmap iC

omap al <Plug>(textobj-wordcolumn-word-a)
omap aL <Plug>(textobj-wordcolumn-WORD-a)
omap il <Plug>(textobj-wordcolumn-word-i)
omap iL <Plug>(textobj-wordcolumn-WORD-i)
xmap al <Plug>(textobj-wordcolumn-word-a)
xmap aL <Plug>(textobj-wordcolumn-WORD-a)
xmap il <Plug>(textobj-wordcolumn-word-i)
xmap iL <Plug>(textobj-wordcolumn-WORD-i)


" Load NeoSolarized color scheme if installed
if &rtp =~ 'NeoSolarized'
  colorscheme NeoSolarized
endif


" Base options
set background=dark
set clipboard^=unnamed,unnamedplus
set guifont=Inconsolata\ Medium\ 18
set hidden
set history=10000
set nojoinspaces
" set langnoremap
" set nostartofline
set number
set scrolloff=3
set noshowmode
set undodir=~/.config/vim/undo
set undofile


" Fix terminal background color
highlight Normal ctermbg=NONE


" Mappings
nnoremap Y y$
xnoremap * y/\V<C-R>"<CR>
xnoremap # y?\V<C-R>"<CR>


" Fix for broken lightline display that sometimes occurs when calling vim via xdg-open
nnoremap <silent> <C-_> G<C-F>gg:call lightline#disable()<CR>:call lightline#enable()<CR>


" Indenting defaults (does not override vim-sleuth's indenting detection)
" Defaults to 2 spaces for most filetypes
if get(g:, '_has_set_default_indent_settings', 0) == 0
  " Set the indenting level to 4 spaces for the following file types.
  autocmd FileType python
    \ setlocal expandtab tabstop=4 shiftwidth=4
  set expandtab
  set tabstop=2
  set shiftwidth=2
  let g:_has_set_default_indent_settings = 1
endif


" delimitMate autoclosing configuration
let delimitMate_quotes = "\" ' ` * |"
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
let delimitMate_jump_expansion = 1

if empty(maparg('<CR>', 'i'))
  imap <CR> <Plug>delimitMateCR
endif


" lightline configuration
let g:lightline = {
  \ 'colorscheme': 'solarized',
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'gitbranch', 'readonly', 'filepath', 'modified' ]
  \   ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'gitbranch#name',
  \   'filepath': 'LightlinePath',
  \   'fileformat': 'LightlineFileformat',
  \   'fileencoding': 'LightlineFileencoding',
  \   'filetype': 'LightlineFiletype',
  \ },
  \ }

function! LightlinePath()
  return len(expand('%:f')) <= 40 && winwidth(0) > 40 ? expand('%:f') : expand('%:t')
endfunction

function! LightlineFileformat()
  return winwidth(0) > 80 ? &fileformat : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 80 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 80 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction


" Load Emmet custom snippets
if &rtp =~ 'webapi-vim' && !empty(glob('~/.config/vim/vim_snippets_custom.json'))
  let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.config/vim/vim_snippets_custom.json')), "\n"))
endif


" Custom function to toggle dark/light solarized themes
function! ToggleSolarizedBackground()
  let &background = ( &background == 'dark'? 'light' : 'dark' )
  if exists('g:lightline')
    runtime autoload/lightline/colorscheme/solarized.vim
    call lightline#colorscheme()
  endif
endfunction

map <F12> :call ToggleSolarizedBackground()<CR>


" Use Dispatch for running tests
let test#strategy = "dispatch"


" Custom command to save & source current file
command! Ws write | source %
